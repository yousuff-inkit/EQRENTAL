<%@page import="org.omg.CORBA.portable.ValueInputStream"%>
<%@page import="java.util.ArrayList"%>
<%@page import ="com.connection.ClsConnection"%>
<%@page import ="com.common.*"%>
<%@page import ="java.sql.*" %>
<%@page import="javax.sql.*" %>
<%@page import="java.util.Iterator" %>
<%@page import="java.util.ArrayList" %>
<%

	ClsCommon ClsCommon=new ClsCommon();
	int acno = request.getParameter("acno")==null?0:Integer.parseInt(request.getParameter("acno").trim());
	String upToDate = request.getParameter("uptodate")==null?"0":request.getParameter("uptodate").trim();
	String atype = request.getParameter("atype"); 

	String sqltran="",aptran="";
	if(atype.equalsIgnoreCase("AR")){
		sqltran=" and dramount-out_amount < 0 ";
		aptran=" and dramount-out_amount > 0 ";
	}else{
		sqltran=" and dramount-out_amount > 0 ";
		aptran=" and dramount-out_amount < 0 ";
	}
	Date sqlUpToDate=null;
	if(!(upToDate.equalsIgnoreCase("undefined")) && !(upToDate.equalsIgnoreCase("")) && !(upToDate.equalsIgnoreCase("0"))){
		sqlUpToDate = ClsCommon.changeStringtoSqlDate(upToDate);
	 }
 	Connection conn=null,connms=null;

	try{
		ClsConnection objconn= new ClsConnection();
		conn=objconn.getMyConnection();
		conn.setAutoCommit(false);

/* 		int[] acno1={5728 , 5730 , 5997 , 6008 , 6009 , 6011 , 6013 , 6015 , 6016 , 6017 , 6020 , 6021 , 6022 , 6023 , 6024 , 6025 , 6027 , 6028 , 6029 , 6030 , 6031 , 6035 , 6036 , 6038 , 6040 , 6041 , 6042 , 6043 , 6044 , 6048 , 6050 , 6051 , 6052 , 6053 , 6054 , 6055 , 6056 , 6057 , 6059 , 6060 , 6062 , 6063 , 6064 , 6066 , 6068 , 6069 , 6071 , 6073 , 6074 , 6075 , 6076 , 6077 , 6078 , 6082 , 6083 , 6088 , 6095 , 6096 , 6097 , 6098 , 6100 , 6101 , 6102 , 6103 , 6105 , 6106 , 6108 , 6110 , 6113 , 6114 , 6115 , 6116 , 6124 , 6126 , 6127 , 6128 , 6129 , 6131 , 6133 , 6134 , 6136 , 6139 , 6140 , 6145 , 6150 , 6152 , 6153 , 6155 , 6157 , 6159 , 6160 , 6164 , 6165 , 6171 , 6173 , 6174 , 6176 , 6179 , 6181 , 6182 , 6183 , 6187 , 6189 , 6190 , 6192 , 6194 , 6197 , 6198 , 6201 , 6208 , 6210 , 6211 , 6212 , 6214 , 6215 , 6218 , 6219 , 6222 , 6226 , 6227 , 6228 , 6231 , 6233 , 6234 , 6235 , 6236 , 6237 , 6240 , 6241 , 6244 , 6246 , 6247 , 6248 , 6250 , 6254 , 6256 , 6257 , 6258 , 6260 , 6261 , 6262 , 6264 , 6265 , 6266 , 6269 , 6271 , 6272 , 6274 , 6275 , 6276 , 6280 , 6282 , 6283 , 6297 , 6300 , 6303 , 6309 , 6311 , 6312 , 6314 , 6318 , 6320 , 6321 , 6323 , 6325 , 6326 , 6327 , 6329 , 6331 , 6332 , 6333 , 6338 , 6340 , 6343 , 6344 , 6346 , 6347 , 6349 , 6350 , 6351 , 6354 , 6357 , 6359 , 6362 , 6364 , 6365 , 6367 , 6369 , 6370 , 6372 , 6373 , 6374 , 6377 , 6378 , 6379 , 6383 , 6386 , 6390 , 6391 , 6394 , 6395 , 6396 , 6397 , 6398 , 6399 , 6400 , 6401 , 6403 , 6404 , 6405 , 6406 , 6408 , 6409 , 6410 , 6411 , 6412 , 6413 , 6414 , 6415 , 6416 , 6417 , 6418 , 6419 , 6420 , 6421 , 6423 , 6424 , 6426 , 6429 , 6430 , 6431 , 6433 , 6434 , 6436 , 6437 , 6438 , 6439 , 6442 , 6443 , 6446 , 6447 , 6449 , 6452 , 6453 , 6454 , 6455 , 6456 , 6458 , 6460 , 6461 , 6463 , 6466 , 6467 , 6468 , 6470 , 6472 , 6475 , 6479 , 6480 , 6481 , 6494 , 6496 , 6497 , 6498 , 6499 , 6506 , 6507 , 6509 , 6512 , 6515 , 6516 , 6517 , 6519 , 6522 , 6526 , 6533 , 6544 , 6546 , 6547 , 6567 , 6574 , 6581 , 6583 , 6584 , 6588 , 6591 , 6595 , 6596 , 6598 , 6607 , 6609 , 6611 , 6615 , 6630 , 6631 , 6638 , 6643 , 6649 , 6650 , 6651 , 6655 , 6659 , 6668 , 6671 , 6675 , 6676 , 6678 , 6679 , 6680 , 6688 , 6689 , 6690 , 6691 , 6692 , 6693 , 6694 , 6695 , 6696 , 6701 , 6705 , 6710 , 6719 , 6725 , 6726 , 6731 , 6754 , 6755 , 6758 , 6760 , 6761 , 6762 , 6775 , 6776 , 6777 , 6779 , 6782 , 6786 , 6791 , 6797 , 6802 , 6807 , 6808 , 6809 , 6816 , 6819 , 6821 , 6824 , 6825 , 6845 , 6848 , 6861 , 6874 , 6876 , 6877 , 6879 , 6952 , 6956 , 6972 , 6976 , 6978 , 6979 , 6980 , 6987 , 6989 , 6992 , 6993 , 6994 , 6995 , 6998 , 7000 , 7004 , 7005 , 7009 , 7025 , 7027 , 7032 , 7033 , 7034 , 7035 , 7036 , 7043 , 7046 , 7047 , 7051 , 7059 , 7062 , 7063 , 7067 , 7068 , 7072 , 7086 , 7087 , 7089 , 7091 , 7092 , 7093 , 7095 , 7097 , 7098 , 7100 , 7102 , 7111 , 7113 , 7117 , 7125 , 7126 , 7127 , 7129 , 7130 , 7131 , 7133 , 7137 , 7138 , 7139 , 7142 , 7151 , 7153 , 7158 , 7159 , 7160 , 7161 , 7164 , 7165 , 7178 , 7204 , 7205 , 7209 , 7211 , 7219 , 7225 , 7233 , 7250 , 7252 , 7253 , 7258 , 7265 , 7269 , 7270 , 7272 , 7273 , 7277 , 7280 , 7283 , 7288 , 7291 , 7304 , 7307 , 7315 , 7319 , 7321 , 7323 , 7325 , 7333 , 7339 , 7340 , 7347 , 7348 , 7352 , 7353 , 7358 , 7365 , 7366 , 7367 , 7373 , 7375 , 7378 , 7379 , 7381 , 7387 , 7388 , 7389 , 7392 , 7393 , 7397 , 7400 , 7406 , 7410 , 7413 , 7418 , 7420 , 7423 , 7424 , 7425 , 7426 , 7434 , 7436 , 7437 , 7438 , 7439 , 7446 , 7451 , 7452 , 7493 , 7494 , 7497 , 7510 , 7514 , 7516 , 7520 , 7521 , 7522 , 7523 , 7524 , 7526 , 7528 , 7530 , 7531 , 7532 , 7533 , 7534 , 7536 , 7537 , 7538 , 7552 , 7562 , 7564 , 7565 , 7567 , 7568 , 7572 , 7573 , 7580 , 7587 , 7595 , 7596 , 7597 , 7605 , 7610 , 7614 , 7627 , 7638 , 7644 , 7647 , 7668 , 7681 , 7688 , 7697 , 7698 , 7699 , 7736 , 7744 , 7755 , 7762 , 7764 , 7769 , 7770 , 7773 , 7784 , 7790 , 7804 , 7805 , 7811 , 7812 , 7829 , 7858 , 7862 , 7869 , 7879 , 7880 , 7883 , 7907 , 7922 , 7924 , 7925 , 7926 , 7927 , 7949 , 7951 , 7965 , 7966 , 7967 , 7974 , 7979 , 7983 , 7995 , 7997 , 7998 , 7999 , 8000 , 8004 , 8022 , 8034 , 8040 , 8041 , 8043 , 8053 , 8062 , 8084 , 8085 , 8096 , 8097 , 8106 , 8108 , 8111 , 8123 , 8145 , 8156 , 8186 , 8198 , 8222 , 8240 , 8261 , 8265 , 8266 , 8280 , 8299 , 8308 , 8309 , 8319 , 8378 , 8385 , 8386 , 8388 , 8389 , 8390 , 8400 , 8401 , 8402 , 8410 , 8411 , 8412 , 8416 , 8417 , 8432 , 8437 , 8450 , 8461 , 8462 , 8463 , 8470 , 8481 , 8486 , 8497 , 8506 , 8507 , 8523 , 8525 , 8529 , 8531 , 8532 , 8533 , 8544 , 8546 , 8566 , 8579 , 8580 , 8624 , 8625 , 8627 , 8628 , 8637 , 8642 , 8644 , 8650 , 8652 , 8660 , 8688 , 8699 , 8705 , 8708 , 8752 , 8766 , 8776 , 8777 , 8778 , 8779 , 8791 , 8821 , 8835 , 8844 , 8852 , 8854 , 8875 , 8883 , 8888 , 8902 , 8915 , 8923 , 8928 , 8947 , 8949 , 8959 , 8965 , 8973 , 8975 , 8976 , 8977 , 9002 , 9003 , 9009 , 9013 , 9016 , 9018 , 9024 , 9026 , 9027 , 9028 , 9030 , 9035 , 9037 , 9046 , 9048 , 9051 , 9052 , 9053 , 9054 , 9062 , 9067 , 9069 , 9071 , 9072 , 9073 , 9074 , 9075 , 9079 , 9080 , 9081 , 9082 , 9083 , 9084 , 9085 , 9086 , 9087 , 9088 , 9089 , 9090 , 9092 , 9095 , 9096 , 9097 , 9098 , 9099 , 9100 , 9101 , 9102 , 9103 , 9104 , 9105 , 9106 , 9107 , 9108 , 9109 , 9110 , 9111 , 9112 , 9113 , 9114 , 9115 , 9116 , 9117 , 9118 , 9120 , 9123 , 9124 , 9125 , 9126 , 9133 , 9134 , 9136 , 9137 , 9138 , 9139 , 9141 , 9142 , 9143 , 9144 , 9145 , 9146 , 9147 , 9148 , 9149 , 9150 , 9151 , 9154 , 9155 , 9156 , 9162 , 9163 , 9164 , 9166 , 9167 , 9168 , 9169 , 9171 , 9172 , 9173 , 9175 , 9176 , 9177 , 9178 , 9179 , 9180 , 9181 , 9182 , 9183 , 9184 , 9186 , 9188 , 9189 , 9190 , 9191 , 9193 , 9194 , 9195 , 9197 , 9198 , 9199 , 9200 , 9201 , 9202 , 9203 , 9205 , 9206 , 9208 , 9209 , 9211 , 9214 , 9215 , 9216 , 9217 , 9218 , 9219 , 9220 , 9225 , 9226 , 9229 , 9230 , 9233 , 9234 , 9235 , 9236 , 9237 , 9238 , 9239 , 9240 , 9242 , 9243 , 9244 , 9245 , 9246 , 9247 , 9248 , 9249 , 9250 , 9251 , 9252 , 9253 , 9254 , 9255 , 9257 , 9258 , 9259 , 9262 , 9265 , 9267 , 9272 , 9274 , 9275 , 9276 , 9278 , 9279 , 9281 , 9284 , 9286 , 9287 , 9288 , 9289 , 9290 , 9291 , 9292 , 9294 , 9295 , 9296 , 9299 , 9300 , 9302 , 9304 , 9305 , 9306 , 9307 , 9309 , 9311 , 9312 , 9313 , 9314 , 9315 , 9317 , 9318 , 9319 , 9320 , 9321 , 9324 , 9325 , 9328 , 9329 , 9331 , 9332 , 9333 , 9335 , 9336 , 9337 , 9338 , 9339 , 9340 , 9341 , 9343 , 9344 , 9345 , 9346 , 9351 , 9352 , 9353 , 9355 , 9361 , 9363 , 9364 , 9365 , 9366 , 9367 , 9369 , 9370 , 9371 , 9372 , 9374 , 9375 , 9377 , 9378 , 9382 , 9383 , 9384 , 9385 , 9387 , 9390 , 9392 , 9393 , 9395 , 9396 , 9398 , 9399 , 9400 , 9401 , 9402 , 9403 , 9405 , 9407 , 9408 , 9409 , 9410 , 9411 , 9412 , 9413 , 9415 , 9416 , 9417 , 9418 , 9420 , 9421 , 9422 , 9423 , 9424 , 9425 , 9426 , 9427 , 9428 , 9429 , 9430 , 9432 , 9433 , 9434 , 9436 , 9437 , 9438 , 9439 , 9440 , 9442 , 9443 , 9448 , 9449 , 9450 , 9452 , 9454 , 9457 , 9461 , 9463 , 9464 , 9465 , 9466 , 9467 , 9468 , 9469 , 9471 , 9472 , 9473 , 9475 , 9476 , 9482 , 9484 , 9485 , 9486 , 9490 , 9493 , 9499 , 9500 , 9501 , 9504 , 9505 , 9509 , 9510 , 9511 , 9512 , 9513 , 9515 , 9516 , 9517 , 9518 , 9520 , 9522 , 9523 , 9524 , 9525 , 9526 , 9530 , 9531 , 9532 , 9534 , 9535 , 9537 , 9538 , 9540 , 9541 , 9542 , 9546 , 9548 , 9549 , 9552 , 9553 , 9554 , 9555 , 9556 , 9557 , 9558 , 9559 , 9560 , 9562 , 9564 , 9567 , 9571 , 9573 , 9575 , 9576 , 9577 , 9579 , 9580 , 9582 , 9583 , 9584 , 9587 , 9588 , 9591 , 9592 , 9593 , 9596 , 9598 , 9599 , 9600 , 9601 , 9602 , 9603 , 9606 , 9607 , 9609 , 9611 , 9612 , 9613 , 9614 , 9615 , 9620 , 9621 , 9622 , 9623 , 9624 , 9625 , 9626 , 9627 , 9631 , 9632 , 9633 , 9634 , 9635 , 9636 , 9637 , 9638 , 9641 , 9642 , 9643 , 9644 , 9645 , 9646 , 9648 , 9649 , 9650 , 9652 , 9654 , 9655 , 9656 , 9657 , 9658 , 9659 , 9660 , 9661 , 9665 , 9666 , 9667 , 9668 , 9669 , 9670 , 9671 , 9675 , 9678 , 9679 , 9681 , 9682 , 9684 , 9686 , 9691 , 9692 , 9693 , 9694 , 9695 , 9696 , 9698 , 9700 , 9701 , 9702 , 9703 , 9704 , 9705 , 9707 , 9708 , 9709 , 9710 , 9711 , 9712 , 9714 , 9715 , 9716 , 9717 , 9718 , 9720 , 9721 , 9723 , 9724 , 9725 , 9726 , 9727 , 9729 , 9730 , 9733 , 9734 , 9735 , 9736 , 9737 , 9738 , 9740 , 9741 , 9742 , 9743 , 9744 , 9747 , 9748 , 9750 , 9751 , 9752 , 9753 , 9754 , 9755 , 9757 , 9759 , 9760 , 9762 , 9763 , 9766 , 9768 , 9770 , 9771 , 9772 , 9773 , 9774 , 9775 , 9776 , 9777 , 9778 , 9780 , 9782 , 9784 , 9785 , 9786 , 9787 , 9788 , 9792 , 9796 , 9797 , 9798 , 9799 , 9800 , 9802 , 9804 , 9809 , 9810 , 9811 , 9812 , 9814 , 9816 , 9820 , 9821 , 9822 , 9823 , 9826 , 9827 , 9828 , 9832 , 9833 , 9834 , 9835 , 9837 , 9840 , 9841 , 9842 , 9847 , 9850 , 9852 , 9856 , 9857 , 9859 , 9864 , 9866 , 9868 , 9869 , 9871 , 9874 , 9878 , 9881 , 9883 , 9884 , 9886 , 9887 , 9890 , 9891 , 9892 , 9893 , 9894 , 9896 , 9897 , 9898 , 9899 , 9900 , 9901 , 9903 , 9907 , 9908 , 9911 , 9912 , 9913 , 9914 , 9916 , 9917 , 9919 , 9921 , 9922 , 9923 , 9926 , 9927 , 9928 , 9929 , 9930 , 9933 , 9937 , 9948 , 9949 , 9950 , 9952 , 9953 , 9954 , 9955 , 9958 , 9961 , 9962 , 9963 , 9968 , 9969 , 9970 , 9971 , 9973 , 9974 , 9975 , 9976 , 9977 , 9979 , 9980 , 9981 , 9982 , 9983 , 9984 , 9987 , 9988 , 9989 , 9990 , 9991 , 9992 , 9995 , 9996 , 9997 , 9998 , 9999 , 10000 , 10001 , 10002 , 10003 , 10004 , 10005 , 10007 , 10010 , 10011 , 10012 , 10015 , 10016 , 10017 , 10018 , 10021 , 10022 , 10024 , 10026 , 10027 , 10028 , 10029 , 10030 , 10031 , 10032 , 10033 , 10034 , 10035 , 10036 , 10038 , 10039 , 10040 , 10042 , 10044 , 10046 , 10047 , 10048 , 10050 , 10051 , 10053 , 10054 , 10055 , 10057 , 10059 , 10062 , 10064 , 10065 , 10066 , 10067 , 10071 , 10072 , 10074 , 10080 , 10081 , 10087 , 10088 , 10097 , 10098 , 10099 , 10100 , 10101 , 10102 , 10103 , 10104 , 10105 , 10106 , 10108 , 10110 , 10111 , 10113 , 10114 , 10115 , 10116 , 10117 , 10118 , 10119 , 10120 , 10121 , 10122 , 10123 , 10124 , 10125 , 10127 , 10128 , 10129 , 10130 , 10131 , 10132 , 10133 , 10134 , 10135 , 10137 , 10138 , 10139 , 10140 , 10141 , 10142 , 10144 , 10146 , 10149 , 10150 , 10151 , 10152 , 10153 , 10155 , 10158 , 10159 , 10160 , 10161 , 10162 , 10163 , 10165 , 10166 , 10167 , 10168 , 10169 , 10170 , 10171 , 10172 , 10173 , 10174 , 10175 , 10176 , 10177 , 10178 , 10179 , 10180 , 10181 , 10182 , 10183 , 10184 , 10187 , 10188 , 10189 , 10190 , 10191 , 10192 , 10193 , 10195 , 10196 , 10197 , 10198 , 10199 , 10200 , 10201 , 10202 , 10203 , 10204 , 10205 , 10206 , 10207 , 10208 , 10210 , 10211 , 10212 , 10213 , 10215 , 10216 , 10220 , 17882};
		for(int i=0;i<acno1.length;i++){
			acno=acno1[i];
 */		
 
	 	 ArrayList<String> Arracno= new ArrayList<String>();
		 String sqlsel="select DISTINCT J.acno from my_jvtran j left join my_head h on j.acno=h.doc_no where j.status=3 and j.dtype='mcp' and  atype='ap'  and "
		 +"out_amount=0 order by acno,dramount*id;";
		 Statement stmtarr= conn.createStatement();
		 ResultSet rsarr = stmtarr.executeQuery(sqlsel);
			while(rsarr.next()){
					Arracno.add(rsarr.getString("acno"));		
			}
			
		
			for(int mul=0;mul<Arracno.size();mul++){
				conn.setAutoCommit(false);
				Arracno.get(mul);
		ArrayList<String> altranid= new ArrayList<String>();
		ArrayList<String> alaptrid= new ArrayList<String>();
		int aptrid=0,tranid=0;
		// ,acno=10569;
		double tranamt=0.0,aptranamt=0.0,apoutamt=0.0,upamt=0.0;
		String updateString="",insString="";
		Statement stmtaptran=null,stmtupd=null,stmtins=null;
		ResultSet rsaptran =null;
		
		String sqlselect="select tranid,(dramount-out_amount)*id amt from my_jvtran where status=3 and acno="+acno+" "+sqltran+" and date<='"+sqlUpToDate+"'";
		System.out.println("values 1======"+sqlselect);
		Statement stmtrecpt= conn.createStatement();
		ResultSet rsselect = stmtrecpt.executeQuery(sqlselect);
		while(rsselect.next()){
			upamt=0.0;
				// altranid.add(rsselect.getString("tranid")+"::"+rsselect.getString("amt"));
				tranid=rsselect.getInt("tranid");
				tranamt=rsselect.getDouble("amt");
		
				String sqlaptran=" select tranid,(dramount-out_amount)*id amt  from my_jvtran where status=3 and acno="+acno+" "+aptran+" and date<='"+sqlUpToDate+"'" ;
				System.out.println("values 2====== "+sqlaptran);
				stmtaptran = conn.createStatement();
				rsaptran = stmtaptran.executeQuery(sqlaptran);
				while(rsaptran.next()){
					aptrid=rsaptran.getInt("tranid");
					aptranamt=rsaptran.getDouble("amt");
					System.out.println("values 4====== "+tranamt+"===="+aptranamt);
					if(aptranamt>tranamt){
						upamt=tranamt;	
					}
					else{  upamt=aptranamt; }
					updateString="update my_jvtran set out_amount=(out_amount*id+"+upamt+")* id  where tranid  in ("+aptrid+","+tranid+")";
					System.out.println("values 3====== "+updateString);
					stmtupd=conn.createStatement();
					stmtupd.execute(updateString);
					upamt=upamt<0.0?upamt*-1:upamt;
					insString=" insert into my_outd(TRANID, AMOUNT, AP_TRID) values ("+tranid+","+upamt+","+aptrid+" )" ;
					System.out.println("values 4====== "+insString);
					stmtins=conn.createStatement();
					stmtins.execute(insString);
					tranamt=ClsCommon.Round(tranamt-upamt,2);
					System.out.println("values 4====== "+tranamt);
					if(tranamt==0){
							System.out.println("==== break === ");
							break;
						}
				}
		}
		// conn.commit();
	//	}
		conn.commit();
		
		}
		response.getWriter().write("S");
	}
	catch(Exception e){
		response.getWriter().write("E");
		e.printStackTrace();	
	}
	finally{
		conn.close();
	}
	
%>